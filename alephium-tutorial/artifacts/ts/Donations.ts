/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as DonationsContractJson } from "../Donations.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace DonationsTypes {
  export type State = Omit<ContractState<any>, "fields">;
  export type DonationEvent = ContractEvent<{
    donor: Address;
    recipient: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    depositToUser: {
      params: CallContractParams<{ recipient: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getDonorTotal: {
      params: CallContractParams<{ donor: Address }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    depositToUser: {
      params: SignExecuteContractMethodParams<{
        recipient: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getDonorTotal: {
      params: SignExecuteContractMethodParams<{ donor: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<DonationsInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  eventIndex = { Donation: 0 };
  consts = { ErrorCodes: { InsufficientAmount: BigInt("0") } };

  at(address: string): DonationsInstance {
    return new DonationsInstance(address);
  }

  tests = {
    depositToUser: async (
      params: Omit<
        TestContractParams<
          never,
          { recipient: Address; amount: bigint },
          { donors?: Map<Address, bigint> }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null, { donors?: Map<Address, bigint> }>> => {
      return testMethod(this, "depositToUser", params, getContractByCodeHash);
    },
    getDonorTotal: async (
      params: Omit<
        TestContractParams<
          never,
          { donor: Address },
          { donors?: Map<Address, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<bigint, { donors?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getDonorTotal", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Donations = new Factory(
  Contract.fromJson(
    DonationsContractJson,
    "=6-2+95=2-2+cf=13-1+5=165-1+c=40+7a7e0214696e73657274206174206d617020706174683a2000=144",
    "9bdfdc5d66acfdb30d57adc2c4a3c0508a9c52db21913357cd9f1568fb8dcf0c",
    []
  )
);

// Use this class to interact with the blockchain
export class DonationsInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    donors: new RalphMap<Address, bigint>(
      Donations.contract,
      this.contractId,
      "donors"
    ),
  };

  async fetchState(): Promise<DonationsTypes.State> {
    return fetchContractState(Donations, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDonationEvent(
    options: EventSubscribeOptions<DonationsTypes.DonationEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Donations.contract,
      this,
      options,
      "Donation",
      fromCount
    );
  }

  view = {
    depositToUser: async (
      params: DonationsTypes.CallMethodParams<"depositToUser">
    ): Promise<DonationsTypes.CallMethodResult<"depositToUser">> => {
      return callMethod(
        Donations,
        this,
        "depositToUser",
        params,
        getContractByCodeHash
      );
    },
    getDonorTotal: async (
      params: DonationsTypes.CallMethodParams<"getDonorTotal">
    ): Promise<DonationsTypes.CallMethodResult<"getDonorTotal">> => {
      return callMethod(
        Donations,
        this,
        "getDonorTotal",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    depositToUser: async (
      params: DonationsTypes.SignExecuteMethodParams<"depositToUser">
    ): Promise<DonationsTypes.SignExecuteMethodResult<"depositToUser">> => {
      return signExecuteMethod(Donations, this, "depositToUser", params);
    },
    getDonorTotal: async (
      params: DonationsTypes.SignExecuteMethodParams<"getDonorTotal">
    ): Promise<DonationsTypes.SignExecuteMethodResult<"getDonorTotal">> => {
      return signExecuteMethod(Donations, this, "getDonorTotal", params);
    },
  };

  async multicall<Callss extends DonationsTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<DonationsTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      Donations,
      this,
      callss,
      getContractByCodeHash
    )) as DonationsTypes.MulticallReturnType<Callss>;
  }
}
